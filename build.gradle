buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        url = "http://maven.dries007.net/content/repositories/ccm/"
    }
    maven {
        url = "http://files.minecraftforge.net/maven/"
    }
    maven {
        url = "https://libraries.minecraft.net/"
    }
}

apply plugin: 'scala'
apply plugin: 'forge'
apply plugin: 'maven'

configurations {
    compile
    deplayJars
}

ext.configFile = file "../CGOrigin/CG.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

group= "com.countrygamer.attackdummy"
archivesBaseName = "AttackDummy"

dependencies {
    compile("com.countrygamer.cgo:CGOrigin:${config.minecraft_version}-3+:dev")
}

version = "0.0.1"

if (System.getenv().BUILD_NUMBER != null) {
    version = version + "_build-" + System.getenv().BUILD_NUMBER
}

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"
    runDir = "${config.assets_path}"

    replace "@PLUGIN_VERSION@", project.version
    replaceIn "AttackDummy.java"
}

version = "${config.minecraft_version}-$version"

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from (sourceSets.main.allSource.srcDirs) {
        include '**/*.java'
        include '**/*.scala'
    }
    classifier = 'dev'
}

artifacts {
    archives jar
    archives sourcesJar
    archives deobfJar
}

uploadArchives {
    if (project.hasProperty("mavenUser") && project.hasProperty("mavenPassword")) {
        repositories {
            mavenDeployer {
                repository(url: "http://maven.dries007.net/content/repositories/ccm/") {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'AttackDummy'
                        url 'https://github.com/TheCountryGamer/AttackDummy'

                        scm {
                            url 'https://github.com/TheCountryGamer/AttackDummy'
                            connection 'scm:git:git://github.com/TheCountryGamer/AttackDummy.git'
                            developerConnection 'scm:git:git@github.com:TheCountryGamer/AttackDummy.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/TheCountryGamer/AttackDummy/issues'
                        }

                        licenses  {
                            license  {
                                name 'Apache License Version 2.0'
                                url 'https://github.com/TheCountryGamer/AttackDummy/blob/master/LICENSE'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'TheCountryGamer'
                                name 'TheCountryGamer'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
}
